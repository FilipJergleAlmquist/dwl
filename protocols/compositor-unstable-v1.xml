<?xml version="1.0" encoding="UTF-8"?>
<protocol name="compositor_unstable_v1">

  <interface name="zcompositor_manager_v1" version="1">
    <description summary="information about windows and arranging windows">
      Clients can use this interface to receive information such as title and 
      PID of windows. They can also use it to position and resize windows.
    </description>

    <request name="get_window_info">
      <description summary="provides information about a window">
        The window_info event is sent after the creation of a window and any
        changes of the information of a window.
      </description>
      <arg name="compositor" type="new_id" interface="zcompositor_v1"/>
    </request>

    <request name="set_window_area">
      <description summary="set the area a surface should cover">
        Sets the position and size of a surface.
      </description>
      <arg name="window_id" type="uint" summary="window id"/>
      <arg name="x" type="int" summary="x position"/>
      <arg name="y" type="int" summary="y position"/>
      <arg name="width" type="int" summary="window width"/>
      <arg name="height" type="int" summary="window height"/>
    </request>

    <request name="raise_window">
      <description summary="raises a window to the top">
        Raises a window to the top.
      </description>
      <arg name="window_id" type="uint" summary="window id"/>
    </request>

    <request name="destroy" type="destructor">
      <description summary="delete this object, used or not">
        Unreferences the compositor manager. This request must be called as soon as it's no longer used.

        It can be called at any time by the client. The client will still have
        to close any FDs it has been given.
      </description>
    </request>
  </interface>
  <interface name="zcompositor_v1" version="1">
    <description summary="a compositor with information about windows">
      This object represents a compositor with information about windows.
    </description>

    <event name="window_info">
      <description summary="provides information about a window">
        The window_info event is sent after the creation of a window and any
        changes of the information of a window.
      </description>
      <arg name="window_id" type="uint" summary="window id"/>
      <arg name="pid" type="int" summary="the PID of the application the window belongs to"/>
      <arg name="title" type="string" summary="the title of the window"/>
    </event>

    <event name="done">
      <description summary="all information about the windows have been sent">
        This event is sent after information about all current windows 
        or changes have been sent.
      </description>
    </event>

    <request name="destroy" type="destructor">
      <description summary="delete this object, used or not">
        Unreferences the frame. This request must be called as soon as its no
        longer used.

        It can be called at any time by the client. The client will still have
        to close any FDs it has been given.
      </description>
    </request>
  </interface>
  <interface name="zinput_device_seat_mapper_v1" version="1">
    <description summary="a input device seat mapper that maps input devices to seats">
      This object represents an input device mapper that can map input devices to a specific seat.
    </description>

    <request name="request_virtual_touch">
      <description summary="requests a virtual touch device that is mapped to a specific seat">
        Request a virtual touch device for a specific seat index. 
        If it does not already exist it is created, otherwise the existing one is used.
      </description>
      <arg name="seat_index" type="int" summary="seat index"/>
      <arg name="id" type="new_id" interface="zvirtual_touch_v1"/>
    </request>

    <request name="register_input_device">
      <description summary="registers an input device name to be mapped to a seat">
        Registers an input device name to be mapped to a seat with a given index. 
        Has to be called before device is created.
      </description>
      <arg name="name" type="string" summary="name of the input device"/>
      <arg name="seat_index" type="int" summary="seat index"/>
    </request>

    <request name="destroy" type="destructor">
      <description summary="delete this object, used or not">
        Unreferences the input device mapper. This request must be called as soon as its no
        longer used.

        It can be called at any time by the client. The client will still have
        to close any FDs it has been given.
      </description>
    </request>
  </interface>

<interface name="zvirtual_touch_v1" version="1">
    <description summary="virtual touchscreen input device">
      The virtual_touch interface represents a touchscreen
      associated with a seat.

      Touch interactions can consist of one or more contacts.
      For each contact, a series of events is generated, starting
      with a down event, followed by zero or more motion events,
      and ending with an up event. Events relating to the same
      contact point can be identified by the ID of the sequence.
    </description>

    <request name="down">
      <description summary="touch down event and beginning of a touch sequence">
	A new touch point has appeared on the surface. This touch point is
	assigned a unique ID. Future events from this touch point reference
	this ID. The ID ceases to be valid after a touch up event and may be
	reused in the future.
      </description>
      <arg name="serial" type="uint" summary="serial number of the touch down event"/>
      <arg name="time" type="uint" summary="timestamp with millisecond granularity"/>
      <arg name="window_id" type="uint" summary="window touched"/>
      <arg name="id" type="int" summary="the unique ID of this touch point"/>
      <arg name="x" type="int" summary="surface-local x coordinate"/>
      <arg name="y" type="int" summary="surface-local y coordinate"/>
    </request>

    <request name="up">
      <description summary="end of a touch event sequence">
	The touch point has disappeared. No further events will be sent for
	this touch point and the touch point's ID is released and may be
	reused in a future touch down event.
      </description>
      <arg name="serial" type="uint" summary="serial number of the touch up event"/>
      <arg name="time" type="uint" summary="timestamp with millisecond granularity"/>
      <arg name="id" type="int" summary="the unique ID of this touch point"/>
    </request>

    <request name="motion">
      <description summary="update of touch point coordinates">
	A touch point has changed coordinates.
      </description>
      <arg name="time" type="uint" summary="timestamp with millisecond granularity"/>
      <arg name="id" type="int" summary="the unique ID of this touch point"/>
      <arg name="x" type="int" summary="surface-local x coordinate"/>
      <arg name="y" type="int" summary="surface-local y coordinate"/>
    </request>
  </interface>

  <interface name="zwindow_capture_manager_v1" version="1">
    <description summary="capture frames for specific windows">
      Clients can use this interface to capture frames from specific windows.
    </description>

    <request name="copy_window_frame">
      <description summary="copies a frame for a window to specified buffer">
        The done event is sent after the window frame has been copied.
      </description>
      <arg name="frame" type="new_id" interface="zwindow_dmabuf_frame_v1"/>
      <arg name="window_id" type="uint" summary="window id"/>
      <arg name="fd" type="fd" summary="file descriptor"/>
      <arg name="width" type="uint" summary="width"/>
      <arg name="height" type="uint" summary="height"/>
      <arg name="pitch" type="uint" summary="pitch"/>
      <arg name="format" type="uint" summary="drm format"/>
      <arg name="modifier_lo" type="uint" summary="drm format modifier low bits"/>
      <arg name="modifier_hi" type="uint" summary="drm format modifier high bits"/>
      <arg name="src_x" type="uint" summary="source x position"/>
      <arg name="src_y" type="uint" summary="source y position"/>
      <arg name="src_width" type="uint" summary="source width"/>
      <arg name="src_height" type="uint" summary="source height"/>
      <arg name="dst_x" type="uint" summary="destination render x position"/>
      <arg name="dst_y" type="uint" summary="destination render y position"/>
      <arg name="dst_width" type="uint" summary="destination render width"/>
      <arg name="dst_height" type="uint" summary="destination render height"/>
      <arg name="wait_for_next_frame" type="uint" summary="waits for next frame if non zero"/>
    </request>

    <request name="destroy" type="destructor">
      <description summary="delete this object, used or not">
        Unreferences the window capture manager. This request must be called as soon as it's no longer used.

        It can be called at any time by the client. The client will still have
        to close any FDs it has been given.
      </description>
    </request>
  </interface>

  <interface name="zwindow_dmabuf_frame_v1" version="1">
    <description summary="a DMA-BUF frame">
      This object represents a single DMA-BUF frame.

      If the capture failed, the "cancel" event is sent. This can happen anytime
      before the "done" event.

      Once either a "done" or a "cancel" event is received, the client should
      destroy the frame. Once an "object" event is received, the client is
      responsible for closing the associated file descriptor.
    </description>

    <event name="done">
      <description summary="indicates frame is has been copied">
        This event is sent after after frame has been copied to buffer.
      </description>
    </event>

    <enum name="cancel_reason">
      <description summary="cancel reason">
        Indicates reason for cancelling the frame.
      </description>
      <entry name="temporary" value="0"
             summary="temporary error, source will produce more frames"/>
      <entry name="permanent" value="1"
             summary="fatal error, source will not produce frames"/>
      <entry name="resizing" value="2"
             summary="temporary error, source will produce more frames"/>
    </enum>

    <event name="cancel">
      <description summary="indicates the frame is no longer valid">
        If the capture failed or if the frame is no longer valid after the
        "frame" event has been emitted, this event will be used to inform the
        client to scrap the frame.

        If the failure is temporary, the client may capture again the same
        source. If the failure is permanent, any further attempts to capture the
        same source will fail again.

        After receiving this event, the client should destroy this object.
      </description>
      <arg name="reason" type="uint" enum="cancel_reason"
           summary="indicates a reason for cancelling this frame capture"/>
    </event>

    <request name="destroy" type="destructor">
      <description summary="delete this object, used or not">
        Unreferences the frame. This request must be called as soon as its no
        longer used.

        It can be called at any time by the client. The client will still have
        to close any FDs it has been given.
      </description>
    </request>
  </interface>
</protocol>
