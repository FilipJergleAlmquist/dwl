/* Generated by wayland-scanner 1.21.0 */

#ifndef COMPOSITOR_UNSTABLE_V1_CLIENT_PROTOCOL_H
#define COMPOSITOR_UNSTABLE_V1_CLIENT_PROTOCOL_H

#include <stdint.h>
#include <stddef.h>
#include "wayland-client.h"

#ifdef  __cplusplus
extern "C" {
#endif

/**
 * @page page_compositor_unstable_v1 The compositor_unstable_v1 protocol
 * @section page_ifaces_compositor_unstable_v1 Interfaces
 * - @subpage page_iface_zcompositor_manager_v1 - information about windows and arranging windows
 * - @subpage page_iface_zcompositor_v1 - a compositor with information about windows
 */
struct zcompositor_manager_v1;
struct zcompositor_v1;

#ifndef ZCOMPOSITOR_MANAGER_V1_INTERFACE
#define ZCOMPOSITOR_MANAGER_V1_INTERFACE
/**
 * @page page_iface_zcompositor_manager_v1 zcompositor_manager_v1
 * @section page_iface_zcompositor_manager_v1_desc Description
 *
 * Clients can use this interface to receive information such as title and 
 * PID of windows. They can also use it to position and resize windows.
 * @section page_iface_zcompositor_manager_v1_api API
 * See @ref iface_zcompositor_manager_v1.
 */
/**
 * @defgroup iface_zcompositor_manager_v1 The zcompositor_manager_v1 interface
 *
 * Clients can use this interface to receive information such as title and 
 * PID of windows. They can also use it to position and resize windows.
 */
extern const struct wl_interface zcompositor_manager_v1_interface;
#endif
#ifndef ZCOMPOSITOR_V1_INTERFACE
#define ZCOMPOSITOR_V1_INTERFACE
/**
 * @page page_iface_zcompositor_v1 zcompositor_v1
 * @section page_iface_zcompositor_v1_desc Description
 *
 * This object represents a compositor with information about windows.
 * @section page_iface_zcompositor_v1_api API
 * See @ref iface_zcompositor_v1.
 */
/**
 * @defgroup iface_zcompositor_v1 The zcompositor_v1 interface
 *
 * This object represents a compositor with information about windows.
 */
extern const struct wl_interface zcompositor_v1_interface;
#endif

#define ZCOMPOSITOR_MANAGER_V1_GET_WINDOW_INFO 0
#define ZCOMPOSITOR_MANAGER_V1_SET_WINDOW_AREA 1
#define ZCOMPOSITOR_MANAGER_V1_DESTROY 2


/**
 * @ingroup iface_zcompositor_manager_v1
 */
#define ZCOMPOSITOR_MANAGER_V1_GET_WINDOW_INFO_SINCE_VERSION 1
/**
 * @ingroup iface_zcompositor_manager_v1
 */
#define ZCOMPOSITOR_MANAGER_V1_SET_WINDOW_AREA_SINCE_VERSION 1
/**
 * @ingroup iface_zcompositor_manager_v1
 */
#define ZCOMPOSITOR_MANAGER_V1_DESTROY_SINCE_VERSION 1

/** @ingroup iface_zcompositor_manager_v1 */
static inline void
zcompositor_manager_v1_set_user_data(struct zcompositor_manager_v1 *zcompositor_manager_v1, void *user_data)
{
	wl_proxy_set_user_data((struct wl_proxy *) zcompositor_manager_v1, user_data);
}

/** @ingroup iface_zcompositor_manager_v1 */
static inline void *
zcompositor_manager_v1_get_user_data(struct zcompositor_manager_v1 *zcompositor_manager_v1)
{
	return wl_proxy_get_user_data((struct wl_proxy *) zcompositor_manager_v1);
}

static inline uint32_t
zcompositor_manager_v1_get_version(struct zcompositor_manager_v1 *zcompositor_manager_v1)
{
	return wl_proxy_get_version((struct wl_proxy *) zcompositor_manager_v1);
}

/**
 * @ingroup iface_zcompositor_manager_v1
 *
 * The window_info event is sent after the creation of a window and any
 * changes of the information of a window.
 */
static inline struct zcompositor_v1 *
zcompositor_manager_v1_get_window_info(struct zcompositor_manager_v1 *zcompositor_manager_v1)
{
	struct wl_proxy *compositor;

	compositor = wl_proxy_marshal_flags((struct wl_proxy *) zcompositor_manager_v1,
			 ZCOMPOSITOR_MANAGER_V1_GET_WINDOW_INFO, &zcompositor_v1_interface, wl_proxy_get_version((struct wl_proxy *) zcompositor_manager_v1), 0, NULL);

	return (struct zcompositor_v1 *) compositor;
}

/**
 * @ingroup iface_zcompositor_manager_v1
 *
 * Sets the position and size of a surface.
 */
static inline void
zcompositor_manager_v1_set_window_area(struct zcompositor_manager_v1 *zcompositor_manager_v1, uint32_t window_id, int32_t x, int32_t y, int32_t width, int32_t height)
{
	wl_proxy_marshal_flags((struct wl_proxy *) zcompositor_manager_v1,
			 ZCOMPOSITOR_MANAGER_V1_SET_WINDOW_AREA, NULL, wl_proxy_get_version((struct wl_proxy *) zcompositor_manager_v1), 0, window_id, x, y, width, height);
}

/**
 * @ingroup iface_zcompositor_manager_v1
 *
 * Unreferences the compositor manager. This request must be called as soon as it's no longer used.
 *
 * It can be called at any time by the client. The client will still have
 * to close any FDs it has been given.
 */
static inline void
zcompositor_manager_v1_destroy(struct zcompositor_manager_v1 *zcompositor_manager_v1)
{
	wl_proxy_marshal_flags((struct wl_proxy *) zcompositor_manager_v1,
			 ZCOMPOSITOR_MANAGER_V1_DESTROY, NULL, wl_proxy_get_version((struct wl_proxy *) zcompositor_manager_v1), WL_MARSHAL_FLAG_DESTROY);
}

/**
 * @ingroup iface_zcompositor_v1
 * @struct zcompositor_v1_listener
 */
struct zcompositor_v1_listener {
	/**
	 * provides information about a window
	 *
	 * The window_info event is sent after the creation of a window
	 * and any changes of the information of a window.
	 * @param window_id window id
	 * @param pid the PID of the application the window belongs to
	 * @param title the title of the window
	 */
	void (*window_info)(void *data,
			    struct zcompositor_v1 *zcompositor_v1,
			    uint32_t window_id,
			    int32_t pid,
			    const char *title);
	/**
	 * all information about the windows have been sent
	 *
	 * This event is sent after information about all current windows
	 * or changes have been sent.
	 */
	void (*done)(void *data,
		     struct zcompositor_v1 *zcompositor_v1);
};

/**
 * @ingroup iface_zcompositor_v1
 */
static inline int
zcompositor_v1_add_listener(struct zcompositor_v1 *zcompositor_v1,
			    const struct zcompositor_v1_listener *listener, void *data)
{
	return wl_proxy_add_listener((struct wl_proxy *) zcompositor_v1,
				     (void (**)(void)) listener, data);
}

#define ZCOMPOSITOR_V1_DESTROY 0

/**
 * @ingroup iface_zcompositor_v1
 */
#define ZCOMPOSITOR_V1_WINDOW_INFO_SINCE_VERSION 1
/**
 * @ingroup iface_zcompositor_v1
 */
#define ZCOMPOSITOR_V1_DONE_SINCE_VERSION 1

/**
 * @ingroup iface_zcompositor_v1
 */
#define ZCOMPOSITOR_V1_DESTROY_SINCE_VERSION 1

/** @ingroup iface_zcompositor_v1 */
static inline void
zcompositor_v1_set_user_data(struct zcompositor_v1 *zcompositor_v1, void *user_data)
{
	wl_proxy_set_user_data((struct wl_proxy *) zcompositor_v1, user_data);
}

/** @ingroup iface_zcompositor_v1 */
static inline void *
zcompositor_v1_get_user_data(struct zcompositor_v1 *zcompositor_v1)
{
	return wl_proxy_get_user_data((struct wl_proxy *) zcompositor_v1);
}

static inline uint32_t
zcompositor_v1_get_version(struct zcompositor_v1 *zcompositor_v1)
{
	return wl_proxy_get_version((struct wl_proxy *) zcompositor_v1);
}

/**
 * @ingroup iface_zcompositor_v1
 *
 * Unreferences the frame. This request must be called as soon as its no
 * longer used.
 *
 * It can be called at any time by the client. The client will still have
 * to close any FDs it has been given.
 */
static inline void
zcompositor_v1_destroy(struct zcompositor_v1 *zcompositor_v1)
{
	wl_proxy_marshal_flags((struct wl_proxy *) zcompositor_v1,
			 ZCOMPOSITOR_V1_DESTROY, NULL, wl_proxy_get_version((struct wl_proxy *) zcompositor_v1), WL_MARSHAL_FLAG_DESTROY);
}

#ifdef  __cplusplus
}
#endif

#endif
